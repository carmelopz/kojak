#!/bin/bash
# 
# Copyright (C) 2013 Red Hat Inc.
# Author: Salim Badakhchani <sal@redhat.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.	
#
########################################################################

# Uncomment to debug script
#set -x

# Check to see if user is root
if [ "${USER}" != "root" ]; then
    echo -e "\n# This script requires root priviledges to run"
    exit
fi

## Declare environment varibles
#
# Distro information
VMNAME=${VMNAME:="CentOS-6.5-x86_64"}
VMHOME=${VMHOME:="/var/lib/libvirt/images"}
TMPDIR=${TMPDIR:="/var/tmp/kojak"}
DISTDIR=${DISTDIR:="RedHat/CentOS/6/5/x86_64"}

# Sources and configuration
CFGDIR=${CFGDIR:="${TMPDIR}/cfg/${DISTDIR}"}
KSCFG=${KSCFG:="/kojak-ks.cfg"}
SRCLOC=${SRCLOC:="http://mirror.centos.org/centos/6/os/x86_64/"}

# Virtual machine specifications
OS_TYPE=${OS_TYPE:="linux"}
OS_VARIANT=${OS_VARIANT:="rhel6"}
ARCH=${ARCH:="x86_64"}
VCPU=${VCPU:="2"}
VMMEM=${VMMEM:="4096"}
VMDISK=${VMDISK:="32768M"}

heading() {
    clear
    echo -e "\n################################################################################"
    echo -e "#                                                                              #"
    echo -e "#                   !!! Welcome to Kojak...Koji in a box !!!                   #"
    echo -e "#                                                                              #\n"
}

description() {
    echo -e ">> Select which configuration options you would want to use."
}

execute () {

clear 
echo -e "\n################################################################################"
echo -e "#                                                                              #"
echo -e "#                  *** Running Kojak... Who loves you baby ***                 #"
echo -e "#                                                                              #\n"

if [ -d "${CFGDIR}" ]; then
   echo -e "# Found configuration directory"
else
   echo -e "# Creating configuration direcory"
   mkdir -p ${CFGDIR}
fi

if [ -f "${CFGDIR}/kojak.cfg" ]; then
    echo -e "# Using options in ${CFGDIR}/kojak.cfg"
    source ${CFGDIR}/kojak.cfg
else
    echo "# Using default configuration options"
fi

if [ -f "/kojak-ks.cfg" ]; then
    echo "# Found Kickstart file"
else
    echo "# Copying Kickstart file"
    cp kojak-ks.cfg  /
fi

VMDOMAIN=$(virsh list --all | grep ${VMNAME})
if [ ! "${VMDOMAIN}" ]; then
    echo -e "# No pre-existing Kojak vm"
else 
    echo -e "# Removing any pre-existing Kojak vm"
    virsh destroy ${VMNAME} > /dev/null 2>&1
    virsh undefine ${VMNAME} > /dev/null 2>&1
fi

if [ ! "${VMHOME}/${VMNAME}.img" ]; then
    echo -e "# No pre-existing Kojak image"
else
    echo -e "# Removing pre-existing Kojak image"
    rm ${VMHOME}/${VMNAME}.img
fi

echo -e "# Restarting virtualization services"
service libvirtd restart > /dev/null 2>&1

echo -e "# Allocating the diskspace"
FALLOCATE=$(which fallocate)
if  [ ! ${FALLOCATE} ]; then
    yum -y install fallocate
else
    ${FALLOCATE} -l ${VMDISK} ${VMHOME}/${VMNAME}.img
    chown qemu:qemu ${VMHOME}/${VMNAME}.img
fi

echo -e "# Checking for virt-install"
VIRT_INSTALL=$(which virt-install)
if [ ! ${VIRT_INSTALL} ]; then
    yum -y install virt-install
fi

echo -e "# Initialising installation\n"
virt-install \
-n ${VMNAME} \
--accelerate \
--ram ${VMMEM} \
--vcpus ${VCPU} \
--os-type ${OS_TYPE} \
--os-variant ${OS_VARIANT} \
--arch ${ARCH} \
--disk ${VMHOME}/${VMNAME}.img \
--initrd-inject "${KSCFG}" \
--location ${SRCLOC} \
--extra-args "ks=file:${KSCFG} console=tty0 console=ttyS0,115200 serial rd_NO_PLYMOUTH" \
--console pty \
--nographics
exit
}

config() {
    while true
    do
    # Execute menu configuration options
    heading

    # Virtual machine name
    echo -e "\n01. Please specify a name for the virtual machine."
    read -e -i "${VMNAME}" -p "VMNAME = " VMNAME
    VMNAME="${VMNAME:=$VMNAME}"

    # Virtual machine home
    echo -e "\n02. Please specify the directory where vm image will be created."
    read -e -i "${VMHOME}" -p "VMHOME = " VMHOME
    VMHOME="${VMHOME:=$VMHOME}"

    # Temp directory
    echo -e "\n03. Please specify a temporay directory used for the installation."
    read -e -i "${TMPDIR}" -p "TMPDIR = " TMPDIR
    TMPDIR="${TMPDIR:=$TMPDIR}"

    # Distribution directory
    echo -e "\n04. Please specify your OS distribution directory."
    read -e -i "${DISTDIR}" -p "DISTDIR = " DISTDIR
    DISTDIR="${DISTDIR:=$DISTDIR}"

    # Source location
    echo -e "\n05. Please specify the location of your distribution sources."
    read -e -i "${SRCLOC}" -p "SRCLOC = " SRCLOC
    SRCLOC="${SRCLOC:=$SRCLOC}"

    # Configuration directories
    echo -e "\n06. Please specify the location of the Kojak configuration directory."
    read -e -i "${CFGDIR}" -p "CFGDIR = " CFGDIR
    CFGDIR="${TMPDIR}/cfg/${DISTDIR}"

    # Kickstart configuration
    echo -e "\n07. Please specify the location of your kickstart configuration file."
    read -e -i "${KSCFG}" -p "KSCFG = " KSCFG
    KSCFG="${KSCFG:=$KSCFG}"

    # Virtual machine OS type
    echo -e "\n08. Please specify your vm OS type."
    read -e -i "${OS_TYPE}" -p "OS_TYPE = " OS_TYPE
    OS_TYPE="linux"

    # Virtual machine OS variant
    echo -e "\n09. Please specify your vm OS variant."
    read -e -i "${OS_VARIANT}" -p "OS_VARIANT = " OS_VARIANT
    OS_VARIANT="${OS_VARIANT}"

    # Virtual machine CPU architecture
    echo -e "\n10. Please specify your cpu architecture."
    read -e -i "${ARCH}" -p "ARCH = " ARCH
    ARCH="${ARCH}"

    # Virtual machine VCPU's 
    echo -e "\n11. Please specify the number of vcpu's."
    read -e -i "${VCPU}" -p "VCPU = " VCPU
    VCPU="${VCPU}"

    # Virtual machine memory allocation
    echo -e "\n12. Please specify your vm memory size allocation."
    read -e -i "${VMMEM}" -p "VMMEM = " VMMEM
    VMMEM="${VMMEM}"
    
    # Virtual machine disk space allocation
    echo -e "\n13. Please specify your vm disk size allocation."
    read -e -i "${VMDISK}" -p "VMDISK = " VMDISK
    VMDISK="${VMDISK}"
    
    echo
    read -n1 -p ">> Do you want to continue with the configuration options supplied? [Y/n]" OPTS 

save_cfg() {
    echo -e "# Kojak SAVED configuration options.\n
VMNAME=${VMNAME}
VMHOME=${VMHOME}
TMPDIR=${TMPDIR}
DISTDIR=${DISTDIR}
SRCLOC=${SRCLOC}
CFGDIR=${CFGDIR}
KSCFG=${KSCFG}
OS_TYPE=${OS_TYPE}
OS_VARIANT=${OS_VARIANT}
ARCH=${ARCH}
VCPU=${VCPU}
VMMEM=${VMMEM}
VMDISK=${VMDISK}" > ${CFGDIR}/kojak.cfg
}

    echo
    case $OPTS in  
        y|Y) save_cfg && execute ;; 
        n|N) menu ;; 
        *) echo "Invalid Option" ;; 
    esac

    done
    exit
}

menu () {
PS3='Please select the configuration options: '
echo
options=("Saved" "Custom" "Print Options" "Quit")
select opt in "${options[@]}"
do
    case $opt in
        "Saved")
            echo "Saved"
            execute
            ;;
        "Custom")
            echo "Custom"
            config
            exit
            ;;
        "Print Options")
            if [ ! -f "${CFGDIR}/kojak.cfg" ]; then
                clear
                heading
                echo -e "# Kojak DEFAULT configuration options.\n
# VMNAME=${VMNAME}
# VMHOME=${VMHOME}
# TMPDIR=${TMPDIR}
# DISTDIR=${DISTDIR}
# SRCLOC=${SRCLOC}
# CFGDIR=${CFGDIR}
# KSCFG=${KSCFG}
# OS_TYPE=${OS_TYPE}
# OS_VARIANT=${OS_VARIANT}
# ARCH=${ARCH}
# VCPU=${VCPU}
# VMMEM=${VMMEM}
# VMDISK=${VMDISK}"
            else
                clear
                heading
                cat ${CFGDIR}/kojak.cfg
            fi
            menu
            ;;
        "Quit")
            exit
            ;;
        *) echo invalid option
            ;;
    esac
done
break
}

clear
heading
description
menu
