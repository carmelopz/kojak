#!/usr/bin/python

import os.path
import sys
import glob
import subprocess
import koji
import time
import re
import optparse
from pprint import pprint

def main():
    
    KOJI_HUB = 'http://koji.localdomain/kojihub'
    
    BAD_ARTIFACTS = ['.md5',
                     '.sha1',
                     '.asc',
                     '-tgz',
                     '-zip',
                     '.html',
                     '.css',
                     '.audit.json',
                     'pom.xml',
                     '_maven.repositories',
                     'maven-metadata.xml',
                     'struts-1.2.8-el.pom',
                     'connector-1.5.pom',
                     'jbosscache-core-3.0.2.GA.pom',
                     'jboss-vfs-2.0.0.CR1.pom',
                     'milyn-smooks-javabean-1.1.pom',
                     'milyn-commons-1.1.pom',
                     'milyn-smooks-core-1.1.pom',
                     'jbosscache-core-3.0.0.GA.pom',
                     'jbosscache-core-3.2.1.GA.pom',
                     'commons-lang-2.0.distribution-zip']
    
    BAD_ARTIFACT_PATTERNS = ['maven-.+-javadoc.pom$']
    
    
    parser = optparse.OptionParser(usage='%prog <tag-name> <local-repo-directory>')
    parser.add_option('-d', '--debug', action='store_true', help='Print verbose error messages')
    
    opts, args = parser.parse_args()
    
    if len(args) < 2:
        print "Usage: %s <tag-name> <repo-directory>" % sys.argv[0]
        sys.exit(1)
    
    scriptdir = os.path.dirname(sys.argv[0])
    tag = args[0]
    basedir = os.path.dirname(args[1])
    
    session = koji.ClientSession(KOJI_HUB)
    
    SUPPORTED_EXTS = []
    for archive_type in session.getArchiveTypes():
        SUPPORTED_EXTS.extend(archive_type['extensions'].split())

    
    def run(cmd, fail=True):
        print cmd
        ret = os.system(cmd)
        if ret != 0:
            print 'Error running command'
            if fail:
                sys.exit(1)
        return ret
    
    def parse_pom(pom):
        try:
            with open(pom, 'r') as content_file:
                content = content_file.read()
            
            maven_info = koji.parse_pom(contents=content)
            maven_info['pom'] = pom if maven_info

            return maven_info
        except KeyboardInterrupt:
            raise
        except:
            print '\nError reading pom at: %s' % pom
            print '  error was: ' + str(sys.exc_info()[1])
            # traceback.print_exc()
    
    def is_valid_import(path):
        for suff in BAD_ARTIFACTS:
            if os.path.basename(path) == suff or path.endswith(suff):
                    print "Skipping file: %s; it was disqualified by name/suffix match: %s" % (path, suff)
                    return False
        
        for pat in BAD_ARTIFACT_PATTERNS:
            pattern = re.compile(pat)
            if pattern.match(path) or pattern.match(os.path.basename(path)):
                print "Skipping file: %s; it was disqualified by pattern match: %s" % (path, pat)
                return False
         
        if not [ext for ext in SUPPORTED_EXTS if path.endswith(ext)]:
            print "Unsupported extension: %s" % path
            return False
        
        return True

     
    def should_import(maven_info, path):
        maven_label = koji.mavenLabel(maven_info)
        
        if '$' in maven_label:
            print '\nBad GAV vector: %s at %s, skipping...' % (maven_label, baseurl)
            return False
        
        if [prefix for prefix in opts.exclude if maven_label.startswith(prefix)]:
            print '\nSkipping excluded artifacts from %s...' % maven_label
            return False
        
        if 'SNAPSHOT' in maven_info['version']:
            print '\nCannot handle snspshots from %s, download and import manually...' % maven_label
            return False
        
        # print 'Maven archives for %s:' % koji.mavenLabel(maven_info), maven_archives
        maven_archives = session.listArchives(type='maven', typeInfo=maven_info, queryOpts={'order': 'id'})
        if not maven_archives:
            print '\n%(groupId)s:%(artifactId)s:%(version)s from %(pom)s has no versions in Koji, downloading and importing' % maven_info
            return True
        else:
            if path not in [a['filename'] for a in maven_archives]:
                print koji.mavenLabel(maven_info), 'exists but %s is missing, importing...' % path
                return True
            
            builds = set()
            for archive in maven_archives:
                builds.add(archive['build_id'])
            for build_id in builds:
                tags = set([t['name'] for t in session.listTags(build=build_id)])
                overlap = taglist.intersection(tags)
                if overlap:
                    if opts.debug:
                        build = session.getBuild(build_id)
                        print '\n%s in available in %s (provides %s:%s:%s)' % (koji.buildLabel(build), ', '.join(overlap),
                                                                               maven_info['group_id'], maven_info['artifact_id'],
                                                                               maven_info['version'])
                else:
                    # just take the highest numbered build
                    labels = []
                    for build_id in sorted(builds):
                        labels.append(koji.buildLabel(session.getBuild(build_id)))
                    print '\n%s:%s:%s is missing from %s, is provided by: %s' % (maven_info['group_id'], maven_info['artifact_id'],
                                                                                 maven_info['version'],
                                                                                 opts.check_tag,
                                                                                 ', '.join(labels))
        return False

   
    output = subprocess.Popen(["find", basedir, "-type", "f", "-name", "*.pom"], stdout=subprocess.PIPE).communicate()[0]
    regen = None
    
    lines = output.split(os.linesep)
    print "Processing %s POMs..." % len(lines)
    
    for line in output.split(os.linesep):
        dir = os.path.dirname(line)
        
        print "Processing: %s\n  (in: %s)" % (line, dir)
        
        maven_info = parse_pom(line)
        if maven_info:
            pprint(maven_info)
        else:
            print "POM didn't parse: %s" % line
            continue
        
        files = []
        do_import = False
        for name in glob.glob("%s/*" % dir):
            imp = is_valid_import(name)
            if imp:
                files.append(name)
            else:
                print "Skipping non-importable file: %s" % name
                continue
            
            if should_import(maven_info, name):
                print "Including file: %s" % name
                do_import = True
        
        if do_import:
            cmd = os.path.join(scriptdir, 'import-maven')
            cmd += ' --tag ' + tag
            cmd += ' '
            cmd += ' '.join(files)
        
            ret = run(cmd, False)
            if ret == 0:
                regen = True
    
    if regen:
        task = session.newRepo(tag)
        task_state = None
        while True:
            task_state = session.getTaskInfo(task)['state']
            if task_state > 1:
               break
            
            print "Waiting for regen-repo (task: %s) to complete..." % task
            time.sleep(15)
        
        if task_state != koji.TASK_STATES['CLOSED']:
          # regen-repo failed.
          sys.exit(2)

if __name__ == '__main__':
    main()

