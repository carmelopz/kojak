#!/usr/bin/python

import os.path
import sys
import glob
import subprocess
import koji
import time
import re

def main():

    KOJI_HUB = 'http://koji.localdomain/kojihub'

    BAD_ARTIFACTS = ['.md5',
                     '.sha1',
                     '.asc',
                     '-tgz',
                     '-zip',
                     '.html',
                     '.css',
                     '.audit.json',
                     'pom.xml',
                     '_maven.repositories',
                     'maven-metadata.xml',
                     'struts-1.2.8-el.pom',
                     'connector-1.5.pom',
                     'jbosscache-core-3.0.2.GA.pom',
                     'jboss-vfs-2.0.0.CR1.pom',
                     'milyn-smooks-javabean-1.1.pom',
                     'milyn-commons-1.1.pom',
                     'milyn-smooks-core-1.1.pom',
                     'jbosscache-core-3.0.0.GA.pom',
                     'jbosscache-core-3.2.1.GA.pom',
                     'commons-lang-2.0.distribution-zip']

    BAD_ARTIFACT_PATTERNS = ['maven-.+-javadoc.pom$']


    if len(sys.argv) < 3:
        print "Usage: %s <tag-name> <repo-directory>" % sys.argv[0]
        sys.exit(1)

    scriptdir = os.path.dirname(sys.argv[0])
    tag = sys.argv[1]
    basedir = os.path.dirname(sys.argv[2])

    session = koji.ClientSession(KOJI_HUB)

    def run(cmd, fail=True):
        print cmd
        ret = os.system(cmd)
        if ret != 0:
            print 'Error running command'
            if fail:
                sys.exit(1)
        return ret

    output = subprocess.Popen(["find", basedir, "-type", "f", "-name", "*.pom"], stdout=subprocess.PIPE).communicate()[0]
    regen = None
    for line in output.split(os.linesep):
        dir = os.path.dirname(line)

        files = []
        for name in glob.glob("%s/*" % dir):
            for suff in BAD_ARTIFACTS:
                if name == suff or name.endswith(suff):
                    continue

            for pat in BAD_ARTIFACT_PATTERNS:
                pattern = re.compile(pat)
                if pattern.match(name) or pattern.match(os.path.basename(name)):
                    continue

            files.append(name)

        cmd = os.path.join(scriptdir, 'import-maven')
        cmd += ' --tag ' + tag
        cmd += ' '
        cmd += ' '.join(files)

        ret = run(cmd, False)
        if ret == 0:
            regen = True

    if regen:
        task = session.newRepo(tag)
        task_state = None
        while True:
            task_state = session.getTaskInfo(task)['state']
            if task_state > 1:
               break

            print "Waiting for regen-repo (task: %s) to complete..." % task
            time.sleep(15)

        if task_state != koji.TASK_STATES['CLOSED']:
          # regen-repo failed.
          sys.exit(2)

if __name__ == '__main__':
    main()

